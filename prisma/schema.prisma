// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  email     String   @unique
  username  String   @unique
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  auth     UserAuth?
  Post     Post[]
}

model UserAuth {
  userId              String    @id
  password            String
  lastPasswordChange  DateTime?
  failedLoginAttempts Int       @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String    @id
  userId       String
  refreshToken String    @unique
  userAgent    String
  ipAddress    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  revokedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id            String   @id
  authorId      String
  likesCount    Int      @default(0)
  viewsCount    Int      @default(0)
  commentsCount Int      @default(0)
  status        String   @default("DRAFT")
  tags          String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime 

  title   String
  content String

  author User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  media  PostMedia[]

  @@index([authorId])
}

model PostMedia {
  id     String @id
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  items Json
}

model Comment {
  id String @id
}
